
IFP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000007b2  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010a  008001a2  008001a2  000008e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e69  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e5  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000378  00000000  00000000  00001b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f6  00000000  00000000  000024bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3a       	cpi	r26, 0xA2	; 162
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 ea       	ldi	r26, 0xA2	; 162
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3a       	cpi	r26, 0xAC	; 172
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 01 	call	0x308	; 0x308 <main>
  9e:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_WDT>:
}


void init_WDT()
{
	MCUSR &= ~(1<<WDRF);
  a6:	84 b7       	in	r24, 0x34	; 52
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	84 bf       	out	0x34, r24	; 52
	
	//set up WDT interrupt
	//WDTCSR = (1<<WDCE)|(1<<WDE);
	WDTCSR = 0b00011000;
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 83       	st	Z, r24
	
	//Start watchdog timer with 8s prescaller
	//WDTCSR = (1<<WDIE)|(1<<WDP3)|(1<<WDP0);
	WDTCSR = 0b01100001;
  b4:	81 e6       	ldi	r24, 0x61	; 97
  b6:	80 83       	st	Z, r24
	
	//SMCR = 0b00000100;	// Power-down mode
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	// Set sleep mode
  b8:	83 b7       	in	r24, 0x33	; 51
  ba:	81 7f       	andi	r24, 0xF1	; 241
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	83 bf       	out	0x33, r24	; 51
		
	//Enable global interrupts
	sei();
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <init_ADC>:
}

void init_ADC()
{
	// configure the ADC module
	ADMUX = 0b01100000;
  ca:	80 e6       	ldi	r24, 0x60	; 96
  cc:	80 93 7c 00 	sts	0x007C, r24
	// 
	// Bit 3:0
	// MUX4:0 = 0000 -> ADC0 as input
	// MUX4:0 = 0001 -> ADC1 as input
	
	ADCSRA = 0b10000111;
  d0:	87 e8       	ldi	r24, 0x87	; 135
  d2:	80 93 7a 00 	sts	0x007A, r24
  d6:	08 95       	ret

000000d8 <ReadADC>:
	// ASPS2:0 = 111: prescaler = 128
}

char ReadADC(uint8_t channelno)	// Function to read Analog input
{
	ADMUX = (ADMUX & 0xF8) | (channelno); // 0xF8 = 0b11111000
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
	
	// Start conversion by setting flag ADSC
	// "write this bit to one to start the first conversion"
	ADCSRA |= (1<<ADSC);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	
	// wait until ADC conversion is complete
	while(ADCSRA & (1<<ADSC)) ;
  ee:	80 81       	ld	r24, Z
  f0:	86 fd       	sbrc	r24, 6
  f2:	fd cf       	rjmp	.-6      	; 0xee <ReadADC+0x16>
		return ADCH;		// return only higher byte
  f4:	80 91 79 00 	lds	r24, 0x0079
	// ADCL: XX000000
	// Total: XXXXXXXXXX000000
	// Where X is either 1 or 0.
	// But this function only returns the highest 8 bits.
	// We don't need to be more precise than that.
}
  f8:	08 95       	ret

000000fa <changeADCinput>:
{
	// https://sites.google.com/site/qeewiki/books/avr-guide/analog-input
	
	uint8_t tmp;            // temp register for storage of misc data

	tmp = ADMUX;            // read the value of ADMUX register
  fa:	80 91 7c 00 	lds	r24, 0x007C
	tmp &= 0x0F;            // AND the first 4 bits (value of ADC pin being used) ((the 4 leftmost bits))
  fe:	8f 70       	andi	r24, 0x0F	; 15
	
	if (tmp == 0)
 100:	31 f4       	brne	.+12     	; 0x10e <changeADCinput+0x14>
		ADMUX++;            // add 1 to ADMUX to go to the next sensor
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret
		
	else if (tmp == 1)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	29 f4       	brne	.+10     	; 0x11c <changeADCinput+0x22>
		ADMUX &= 0xF8;      // clear the last 4 bits to reset the MUX to ADC0
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <waterThePlant>:
	
	// start the pump, for a set time
	int i;	
	
	int time = size;
	PORTD = 0b10000000;	// Turn on power to the pump
 11e:	20 e8       	ldi	r18, 0x80	; 128
 120:	2b b9       	out	0x0b, r18	; 11

	for (i = 0; i < time; i++)
 122:	18 16       	cp	r1, r24
 124:	19 06       	cpc	r1, r25
 126:	84 f4       	brge	.+32     	; 0x148 <waterThePlant+0x2a>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	4f ef       	ldi	r20, 0xFF	; 255
 12e:	53 e2       	ldi	r21, 0x23	; 35
 130:	64 ef       	ldi	r22, 0xF4	; 244
 132:	41 50       	subi	r20, 0x01	; 1
 134:	50 40       	sbci	r21, 0x00	; 0
 136:	60 40       	sbci	r22, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <waterThePlant+0x14>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <waterThePlant+0x1e>
 13c:	00 00       	nop
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	91 f7       	brne	.-28     	; 0x12c <waterThePlant+0xe>
		_delay_ms(5000);
		
	PORTD = 0b00000000;
 148:	1b b8       	out	0x0b, r1	; 11
 14a:	08 95       	ret

0000014c <checkMoisture>:
{
	// 255		in air
	// 200~210	in very dry soil
	// 20		just watered
	
	if (value >= level)		// if measured moisture is same or higher (more dry) than the breaking point to water the plant
 14c:	86 17       	cp	r24, r22
 14e:	30 f0       	brcs	.+12     	; 0x15c <checkMoisture+0x10>
		waterThePlant(plantSize);
 150:	80 91 a7 01 	lds	r24, 0x01A7
 154:	90 91 a8 01 	lds	r25, 0x01A8
 158:	0e 94 8f 00 	call	0x11e	; 0x11e <waterThePlant>
 15c:	08 95       	ret

0000015e <checkWaterLevel>:
{
	// 0 - 115		0 - 5 mm of water
	// 115 - 130	5 - 20 mm of water
	// 130 <		20 + mm of water
	
	if (value > 130)						// at least 20 mm of water
 15e:	83 38       	cpi	r24, 0x83	; 131
 160:	18 f0       	brcs	.+6      	; 0x168 <checkWaterLevel+0xa>
	PORTB = 0b00000001;	// Green
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	85 b9       	out	0x05, r24	; 5
 166:	0e c0       	rjmp	.+28     	; 0x184 <checkWaterLevel+0x26>
	
	else if (value <= 130 && value > 115)	// 5-20 mm of water
 168:	9c e8       	ldi	r25, 0x8C	; 140
 16a:	98 0f       	add	r25, r24
 16c:	9f 30       	cpi	r25, 0x0F	; 15
 16e:	18 f4       	brcc	.+6      	; 0x176 <checkWaterLevel+0x18>
	PORTB = 0b00000010;	// Yellow
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	85 b9       	out	0x05, r24	; 5
 174:	07 c0       	rjmp	.+14     	; 0x184 <checkWaterLevel+0x26>

	else if (value <= 115)					// 5 mm or less of water
 176:	84 37       	cpi	r24, 0x74	; 116
 178:	18 f4       	brcc	.+6      	; 0x180 <checkWaterLevel+0x22>
	PORTB = 0b00000100;	// Red
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	02 c0       	rjmp	.+4      	; 0x184 <checkWaterLevel+0x26>

	else
		PORTB = 0b00000111;
 180:	87 e0       	ldi	r24, 0x07	; 7
 182:	85 b9       	out	0x05, r24	; 5
	
	//if (useDatabase == true)
		// Post on server
	
	waterLevelValue = 0;
 184:	10 92 aa 01 	sts	0x01AA, r1
 188:	08 95       	ret

0000018a <appendSerial>:
}


void appendSerial(char c)
{
	txBuffer[txWritePos] = c;
 18a:	90 91 a3 01 	lds	r25, 0x01A3
 18e:	e9 2f       	mov	r30, r25
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	e5 5d       	subi	r30, 0xD5	; 213
 194:	fd 4f       	sbci	r31, 0xFD	; 253
 196:	80 83       	st	Z, r24
	txWritePos++;
 198:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(txWritePos >= TX_BUFFER_SIZE)
 19a:	1a f0       	brmi	.+6      	; 0x1a2 <appendSerial+0x18>


void appendSerial(char c)
{
	txBuffer[txWritePos] = c;
	txWritePos++;
 19c:	90 93 a3 01 	sts	0x01A3, r25
 1a0:	08 95       	ret
	
	if(txWritePos >= TX_BUFFER_SIZE)
		txWritePos = 0;
 1a2:	10 92 a3 01 	sts	0x01A3, r1
 1a6:	08 95       	ret

000001a8 <serialWrite>:
}

void serialWrite(char c[])
{
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++)
 1b0:	10 e0       	ldi	r17, 0x00	; 0
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <serialWrite+0x1a>
	{
		appendSerial(c[i]);
 1b4:	fe 01       	movw	r30, r28
 1b6:	e2 0f       	add	r30, r18
 1b8:	f3 1f       	adc	r31, r19
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 c5 00 	call	0x18a	; 0x18a <appendSerial>
		txWritePos = 0;
}

void serialWrite(char c[])
{
	for(uint8_t i = 0; i < strlen(c); i++)
 1c0:	1f 5f       	subi	r17, 0xFF	; 255
 1c2:	21 2f       	mov	r18, r17
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	fe 01       	movw	r30, r28
 1c8:	01 90       	ld	r0, Z+
 1ca:	00 20       	and	r0, r0
 1cc:	e9 f7       	brne	.-6      	; 0x1c8 <serialWrite+0x20>
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	ec 1b       	sub	r30, r28
 1d2:	fd 0b       	sbc	r31, r29
 1d4:	2e 17       	cp	r18, r30
 1d6:	3f 07       	cpc	r19, r31
 1d8:	68 f3       	brcs	.-38     	; 0x1b4 <serialWrite+0xc>
	{
		appendSerial(c[i]);
	}
	
	if (UCSR0A & (1 << UDRE0))
 1da:	80 91 c0 00 	lds	r24, 0x00C0
 1de:	85 fd       	sbrc	r24, 5
		UDR0 = 0;
 1e0:	10 92 c6 00 	sts	0x00C6, r1
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	08 95       	ret

000001ec <loginWifi>:

	loginWifi("tomas's iPhone", "2az1ftt9rlng");
}

void loginWifi(char SSID[], char Password[])
{
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	60 97       	sbiw	r28, 0x10	; 16
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	7c 01       	movw	r14, r24
 20a:	8b 01       	movw	r16, r22
		PORTD = 0b01000000;	// Turn on power to the wi-fi module
 20c:	80 e4       	ldi	r24, 0x40	; 64
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	2f e0       	ldi	r18, 0x0F	; 15
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	4f ef       	ldi	r20, 0xFF	; 255
 216:	83 ed       	ldi	r24, 0xD3	; 211
 218:	90 e3       	ldi	r25, 0x30	; 48
 21a:	41 50       	subi	r20, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <loginWifi+0x2e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <loginWifi+0x38>
 224:	00 00       	nop
 226:	21 50       	subi	r18, 0x01	; 1
 228:	31 09       	sbc	r19, r1
		// Then have to wait 10-15 sec for it to start up and connect to network (previous settings)
		// Then we wait for 15 sec
		for(int i = 0; i < 15; i++)
 22a:	a1 f7       	brne	.-24     	; 0x214 <loginWifi+0x28>
			_delay_ms(1000);

		// Enable the module's mode
		serialWrite("AT+CWMODE=3\r\n");
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	33 ed       	ldi	r19, 0xD3	; 211
 238:	40 e3       	ldi	r20, 0x30	; 48
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	30 40       	sbci	r19, 0x00	; 0
 23e:	40 40       	sbci	r20, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <loginWifi+0x4e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <loginWifi+0x58>
 244:	00 00       	nop
		/*
		// Have to manually enter SSID and Password
		serialWrite("AT+CWJAP=\"Fjallet\",\"0702794209\"\r\n");
		*/
		
		char str1[] = "AT+CWJAP=\"";
 246:	9b e0       	ldi	r25, 0x0B	; 11
 248:	e5 e1       	ldi	r30, 0x15	; 21
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	de 01       	movw	r26, r28
 24e:	11 96       	adiw	r26, 0x01	; 1
 250:	01 90       	ld	r0, Z+
 252:	0d 92       	st	X+, r0
 254:	9a 95       	dec	r25
 256:	e1 f7       	brne	.-8      	; 0x250 <loginWifi+0x64>
		char str2[] = "\",\"";
 258:	82 e2       	ldi	r24, 0x22	; 34
 25a:	9c e2       	ldi	r25, 0x2C	; 44
 25c:	a2 e2       	ldi	r26, 0x22	; 34
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	8c 87       	std	Y+12, r24	; 0x0c
 262:	9d 87       	std	Y+13, r25	; 0x0d
 264:	ae 87       	std	Y+14, r26	; 0x0e
 266:	bf 87       	std	Y+15, r27	; 0x0f
		char string[] = {0};
 268:	18 8a       	std	Y+16, r1	; 0x10
		strcat(string, str1);
 26a:	be 01       	movw	r22, r28
 26c:	6f 5f       	subi	r22, 0xFF	; 255
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	ce 01       	movw	r24, r28
 272:	40 96       	adiw	r24, 0x10	; 16
 274:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
		strcat(string, SSID);
 278:	b7 01       	movw	r22, r14
 27a:	ce 01       	movw	r24, r28
 27c:	40 96       	adiw	r24, 0x10	; 16
 27e:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
		strcat(string, str2);
 282:	be 01       	movw	r22, r28
 284:	64 5f       	subi	r22, 0xF4	; 244
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	ce 01       	movw	r24, r28
 28a:	40 96       	adiw	r24, 0x10	; 16
 28c:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
		strcat(string, Password);
 290:	b8 01       	movw	r22, r16
 292:	ce 01       	movw	r24, r28
 294:	40 96       	adiw	r24, 0x10	; 16
 296:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
		strcat(string, CRLF);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	ce 01       	movw	r24, r28
 2a0:	40 96       	adiw	r24, 0x10	; 16
 2a2:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
		serialWrite(string);
 2a6:	ce 01       	movw	r24, r28
 2a8:	40 96       	adiw	r24, 0x10	; 16
 2aa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 2ae:	82 e1       	ldi	r24, 0x12	; 18
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	33 ed       	ldi	r19, 0xD3	; 211
 2b6:	40 e3       	ldi	r20, 0x30	; 48
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
 2bc:	40 40       	sbci	r20, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <loginWifi+0xcc>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <loginWifi+0xd6>
 2c2:	00 00       	nop
 2c4:	01 97       	sbiw	r24, 0x01	; 1
		
		// But can't successfully find more than letter 'W', so have to assume it successfully connected to the network
		
		// Then again have to wait 15 sec for it to connect to network
		// Then we wait for 18 sec
		for(int i = 0; i < 18; i++)
 2c6:	a9 f7       	brne	.-22     	; 0x2b2 <loginWifi+0xc6>
			_delay_ms(1000);
			
		PORTD = 0b00000000;	// Turn on power to the wi-fi module
 2c8:	1b b8       	out	0x0b, r1	; 11
}
 2ca:	60 96       	adiw	r28, 0x10	; 16
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <init_Wifi>:


void init_Wifi()
{
	// Finish setting BAUD rate
	UBRR0H = (BRC >> 8);
 2e4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BRC;
 2e8:	87 e6       	ldi	r24, 0x67	; 103
 2ea:	80 93 c4 00 	sts	0x00C4, r24

	// Setup Transmitter (TX) and Receiver (RX)
	UCSR0B = (1 << TXEN0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
 2ee:	88 ed       	ldi	r24, 0xD8	; 216
 2f0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);	// 8-bit dataframe
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	80 93 c2 00 	sts	0x00C2, r24

	loginWifi("tomas's iPhone", "2az1ftt9rlng");
 2fa:	60 e2       	ldi	r22, 0x20	; 32
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	8d e2       	ldi	r24, 0x2D	; 45
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 f6 00 	call	0x1ec	; 0x1ec <loginWifi>
 306:	08 95       	ret

00000308 <main>:
char getChar(void);
char peekChar(void);

int main(void)
{
	DDRB = 0b00000111;	// Output for LEDs
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11110000;	// Output for:
 30c:	80 ef       	ldi	r24, 0xF0	; 240
 30e:	8a b9       	out	0x0a, r24	; 10
	// Waterpump
	// Wi-fi
	// Water Level Sensor
	// Moisture Sensor
	
	if (useDatabase == true)
 310:	80 91 a5 01 	lds	r24, 0x01A5
 314:	90 91 a6 01 	lds	r25, 0x01A6
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	11 f4       	brne	.+4      	; 0x320 <main+0x18>
		init_Wifi();
 31c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <init_Wifi>
	
	moistureLeveltoWater = 100;	// Standard
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	80 93 a9 01 	sts	0x01A9, r24
	plantSize = 3;
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 a8 01 	sts	0x01A8, r25
 32e:	80 93 a7 01 	sts	0x01A7, r24
	// 2 - Small
	// 3 - Medium
	// 4 - Large
	// 5 - Extra Large
	
	init_ADC();
 332:	0e 94 65 00 	call	0xca	; 0xca <init_ADC>
    init_WDT();			//initialize watchdog
 336:	0e 94 53 00 	call	0xa6	; 0xa6 <init_WDT>
    
	while (1) 
    {
    }
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x32>

0000033c <inputToServer>:
		PORTD = 0b00000000;	// Turn on power to the wi-fi module
}


void inputToServer(int ID, char moisture, char waterlevel)
{
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	ea 97       	sbiw	r28, 0x3a	; 58
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	7c 01       	movw	r14, r24
 35a:	06 2f       	mov	r16, r22
 35c:	14 2f       	mov	r17, r20
	PORTD = 0b01000000;	// Turn on power to the wi-fi module
 35e:	80 e4       	ldi	r24, 0x40	; 64
 360:	8b b9       	out	0x0b, r24	; 11
 362:	22 e1       	ldi	r18, 0x12	; 18
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	4f ef       	ldi	r20, 0xFF	; 255
 368:	83 ed       	ldi	r24, 0xD3	; 211
 36a:	90 e3       	ldi	r25, 0x30	; 48
 36c:	41 50       	subi	r20, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <inputToServer+0x30>
 374:	00 c0       	rjmp	.+0      	; 0x376 <inputToServer+0x3a>
 376:	00 00       	nop
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	31 09       	sbc	r19, r1
	// Then again have to wait 15 sec for it to start and connect to network
	// Then we wait for 18 sec
	for(int i = 0; i < 18; i++)
 37c:	a1 f7       	brne	.-24     	; 0x366 <inputToServer+0x2a>
		_delay_ms(1000);
	
	// Enable multiple connections
	serialWrite("AT+CIPMUX=1\r\n");
 37e:	8c e3       	ldi	r24, 0x3C	; 60
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	43 ed       	ldi	r20, 0xD3	; 211
 38a:	80 e3       	ldi	r24, 0x30	; 48
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <inputToServer+0x50>
 394:	00 c0       	rjmp	.+0      	; 0x396 <inputToServer+0x5a>
 396:	00 00       	nop
	_delay_ms(1000);
	
	// Enter what connection, URL and port
	serialWrite("AT+CIPSTART=4,\"TCP\",\"ifp.hopto.org\",80\r\n");
 398:	8a e4       	ldi	r24, 0x4A	; 74
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 3a0:	9f ef       	ldi	r25, 0xFF	; 255
 3a2:	23 ed       	ldi	r18, 0xD3	; 211
 3a4:	40 e3       	ldi	r20, 0x30	; 48
 3a6:	91 50       	subi	r25, 0x01	; 1
 3a8:	20 40       	sbci	r18, 0x00	; 0
 3aa:	40 40       	sbci	r20, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <inputToServer+0x6a>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <inputToServer+0x74>
 3b0:	00 00       	nop
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	93 ed       	ldi	r25, 0xD3	; 211
 3b6:	20 e3       	ldi	r18, 0x30	; 48
 3b8:	81 50       	subi	r24, 0x01	; 1
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <inputToServer+0x7c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <inputToServer+0x86>
 3c2:	00 00       	nop
 3c4:	4f ef       	ldi	r20, 0xFF	; 255
 3c6:	83 ed       	ldi	r24, 0xD3	; 211
 3c8:	90 e3       	ldi	r25, 0x30	; 48
 3ca:	41 50       	subi	r20, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <inputToServer+0x8e>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <inputToServer+0x98>
 3d4:	00 00       	nop
	_delay_ms(1000);
	
	int bytesToSend = 40;
	
	// edit the size of bytes to send, depending of values
	if(moisture > 10)
 3d6:	0b 30       	cpi	r16, 0x0B	; 11
 3d8:	18 f0       	brcs	.+6      	; 0x3e0 <inputToServer+0xa4>
		bytesToSend++;
 3da:	89 e2       	ldi	r24, 0x29	; 41
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <inputToServer+0xa8>
	// Enter what connection, URL and port
	serialWrite("AT+CIPSTART=4,\"TCP\",\"ifp.hopto.org\",80\r\n");
	for(int i = 0; i < 3; i++)
	_delay_ms(1000);
	
	int bytesToSend = 40;
 3e0:	88 e2       	ldi	r24, 0x28	; 40
 3e2:	90 e0       	ldi	r25, 0x00	; 0
	
	// edit the size of bytes to send, depending of values
	if(moisture > 10)
		bytesToSend++;
	if(moisture > 100)
 3e4:	05 36       	cpi	r16, 0x65	; 101
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <inputToServer+0xae>
		bytesToSend++;
 3e8:	01 96       	adiw	r24, 0x01	; 1
		
	if(waterlevel > 10)
 3ea:	1b 30       	cpi	r17, 0x0B	; 11
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <inputToServer+0xb4>
		bytesToSend++;
 3ee:	01 96       	adiw	r24, 0x01	; 1
	if(waterlevel > 100)
 3f0:	15 36       	cpi	r17, 0x65	; 101
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <inputToServer+0xba>
		bytesToSend++;
 3f4:	01 96       	adiw	r24, 0x01	; 1
	
	// Send how many bytes to send
	char bytesString[2];
	itoa(bytesToSend, bytesString, 10);
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	be 01       	movw	r22, r28
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	0e 94 97 03 	call	0x72e	; 0x72e <itoa>
	
	char strBytes[] = "AT+CIPSEND=4,";
 404:	9e e0       	ldi	r25, 0x0E	; 14
 406:	e3 e7       	ldi	r30, 0x73	; 115
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	de 01       	movw	r26, r28
 40c:	13 96       	adiw	r26, 0x03	; 3
 40e:	01 90       	ld	r0, Z+
 410:	0d 92       	st	X+, r0
 412:	9a 95       	dec	r25
 414:	e1 f7       	brne	.-8      	; 0x40e <inputToServer+0xd2>
	char stringBytes[] = {0};
 416:	19 8a       	std	Y+17, r1	; 0x11
	strcat(stringBytes, strBytes);
 418:	be 01       	movw	r22, r28
 41a:	6d 5f       	subi	r22, 0xFD	; 253
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	ce 01       	movw	r24, r28
 420:	41 96       	adiw	r24, 0x11	; 17
 422:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringBytes, bytesString);
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	ce 01       	movw	r24, r28
 42e:	41 96       	adiw	r24, 0x11	; 17
 430:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringBytes, CRLF);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	71 e0       	ldi	r23, 0x01	; 1
 438:	ce 01       	movw	r24, r28
 43a:	41 96       	adiw	r24, 0x11	; 17
 43c:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	serialWrite(stringBytes);
 440:	ce 01       	movw	r24, r28
 442:	41 96       	adiw	r24, 0x11	; 17
 444:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	43 ed       	ldi	r20, 0xD3	; 211
 44c:	80 e3       	ldi	r24, 0x30	; 48
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	40 40       	sbci	r20, 0x00	; 0
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <inputToServer+0x112>
 456:	00 c0       	rjmp	.+0      	; 0x458 <inputToServer+0x11c>
 458:	00 00       	nop
 45a:	9f ef       	ldi	r25, 0xFF	; 255
 45c:	23 ed       	ldi	r18, 0xD3	; 211
 45e:	40 e3       	ldi	r20, 0x30	; 48
 460:	91 50       	subi	r25, 0x01	; 1
 462:	20 40       	sbci	r18, 0x00	; 0
 464:	40 40       	sbci	r20, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <inputToServer+0x124>
 468:	00 c0       	rjmp	.+0      	; 0x46a <inputToServer+0x12e>
 46a:	00 00       	nop
	_delay_ms(1000);
	_delay_ms(1000);
	
	// Send the message to php
	char IDString[2];
	itoa(ID, IDString, 10);
 46c:	4a e0       	ldi	r20, 0x0A	; 10
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	be 01       	movw	r22, r28
 472:	6e 5e       	subi	r22, 0xEE	; 238
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	c7 01       	movw	r24, r14
 478:	0e 94 97 03 	call	0x72e	; 0x72e <itoa>
	
	char moistureString[] = {0};
 47c:	1c 8a       	std	Y+20, r1	; 0x14
	itoa((int)moisture, moistureString, 10);
 47e:	4a e0       	ldi	r20, 0x0A	; 10
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	be 01       	movw	r22, r28
 484:	6c 5e       	subi	r22, 0xEC	; 236
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	80 2f       	mov	r24, r16
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 97 03 	call	0x72e	; 0x72e <itoa>
	
	char waterlevelString[] = {0};
 490:	1d 8a       	std	Y+21, r1	; 0x15
	itoa((int)waterlevel, waterlevelString, 10);
 492:	4a e0       	ldi	r20, 0x0A	; 10
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	be 01       	movw	r22, r28
 498:	6b 5e       	subi	r22, 0xEB	; 235
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	81 2f       	mov	r24, r17
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 97 03 	call	0x72e	; 0x72e <itoa>
		
	char strSend1[] = "GET /testserver/dataIn.php/?id=";
 4a4:	80 e2       	ldi	r24, 0x20	; 32
 4a6:	e1 e8       	ldi	r30, 0x81	; 129
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	de 01       	movw	r26, r28
 4ac:	56 96       	adiw	r26, 0x16	; 22
 4ae:	01 90       	ld	r0, Z+
 4b0:	0d 92       	st	X+, r0
 4b2:	8a 95       	dec	r24
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <inputToServer+0x172>
	char strSend2[] = "c";
 4b6:	83 e6       	ldi	r24, 0x63	; 99
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9f ab       	std	Y+55, r25	; 0x37
 4bc:	8e ab       	std	Y+54, r24	; 0x36
	char strSend3[] = "c";
 4be:	99 af       	std	Y+57, r25	; 0x39
 4c0:	88 af       	std	Y+56, r24	; 0x38
	char stringSend[] = {0};
 4c2:	1a ae       	std	Y+58, r1	; 0x3a
	strcat(stringSend, strSend1);
 4c4:	be 01       	movw	r22, r28
 4c6:	6a 5e       	subi	r22, 0xEA	; 234
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	ce 01       	movw	r24, r28
 4cc:	ca 96       	adiw	r24, 0x3a	; 58
 4ce:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, IDString);
 4d2:	be 01       	movw	r22, r28
 4d4:	6e 5e       	subi	r22, 0xEE	; 238
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	ce 01       	movw	r24, r28
 4da:	ca 96       	adiw	r24, 0x3a	; 58
 4dc:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, strSend2);
 4e0:	be 01       	movw	r22, r28
 4e2:	6a 5c       	subi	r22, 0xCA	; 202
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	ce 01       	movw	r24, r28
 4e8:	ca 96       	adiw	r24, 0x3a	; 58
 4ea:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, moistureString);
 4ee:	be 01       	movw	r22, r28
 4f0:	6c 5e       	subi	r22, 0xEC	; 236
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	ce 01       	movw	r24, r28
 4f6:	ca 96       	adiw	r24, 0x3a	; 58
 4f8:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, strSend3);
 4fc:	be 01       	movw	r22, r28
 4fe:	68 5c       	subi	r22, 0xC8	; 200
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	ce 01       	movw	r24, r28
 504:	ca 96       	adiw	r24, 0x3a	; 58
 506:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, waterlevelString);
 50a:	be 01       	movw	r22, r28
 50c:	6b 5e       	subi	r22, 0xEB	; 235
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	ce 01       	movw	r24, r28
 512:	ca 96       	adiw	r24, 0x3a	; 58
 514:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	strcat(stringSend, CRLF);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	ce 01       	movw	r24, r28
 51e:	ca 96       	adiw	r24, 0x3a	; 58
 520:	0e 94 8c 03 	call	0x718	; 0x718 <strcat>
	serialWrite(stringSend);
 524:	ce 01       	movw	r24, r28
 526:	ca 96       	adiw	r24, 0x3a	; 58
 528:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	93 ed       	ldi	r25, 0xD3	; 211
 530:	20 e3       	ldi	r18, 0x30	; 48
 532:	81 50       	subi	r24, 0x01	; 1
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	20 40       	sbci	r18, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <inputToServer+0x1f6>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <inputToServer+0x200>
 53c:	00 00       	nop
	
	_delay_ms(1000);
	
	// Send empty line
	serialWrite(CRLF);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialWrite>
 546:	4f ef       	ldi	r20, 0xFF	; 255
 548:	83 ed       	ldi	r24, 0xD3	; 211
 54a:	90 e3       	ldi	r25, 0x30	; 48
 54c:	41 50       	subi	r20, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <inputToServer+0x210>
 554:	00 c0       	rjmp	.+0      	; 0x556 <inputToServer+0x21a>
 556:	00 00       	nop
	
	_delay_ms(1000);
	PORTD = 0b00000000;	// Turn on power to the wi-fi module
 558:	1b b8       	out	0x0b, r1	; 11
}
 55a:	ea 96       	adiw	r28, 0x3a	; 58
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	08 95       	ret

00000574 <wakeUp_Measure>:
}

void wakeUp_Measure()
{
	// make sure reads from ADC0
	ADMUX = (ADMUX & 0xF8) | (MOISTURE_PIN); // 0xF8 = 0b11111000
 574:	ec e7       	ldi	r30, 0x7C	; 124
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	88 7f       	andi	r24, 0xF8	; 248
 57c:	80 83       	st	Z, r24
	
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	// Measure the moisture
	PORTD = 0b00010000;	// Turn on power to this sensor
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	8b b9       	out	0x0b, r24	; 11
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	81 ee       	ldi	r24, 0xE1	; 225
 586:	94 e0       	ldi	r25, 0x04	; 4
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <wakeUp_Measure+0x14>
 590:	00 c0       	rjmp	.+0      	; 0x592 <wakeUp_Measure+0x1e>
 592:	00 00       	nop
	_delay_ms(100);		// Let it wait for 100 ms so the voltage can be noticed by sensor
	moistureValue = ReadADC(MOISTURE_PIN);
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 59a:	80 93 ab 02 	sts	0x02AB, r24
	changeADCinput();	// change ADC input
 59e:	0e 94 7d 00 	call	0xfa	; 0xfa <changeADCinput>
	PORTD = 0b00000000;	// Turn off power to this sensor
 5a2:	1b b8       	out	0x0b, r1	; 11
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	83 ed       	ldi	r24, 0xD3	; 211
 5a8:	90 e3       	ldi	r25, 0x30	; 48
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <wakeUp_Measure+0x36>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <wakeUp_Measure+0x40>
 5b4:	00 00       	nop
	
	_delay_ms(1000);
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	// Measure the water level
	PORTD = 0b00100000;	// Turn on power to this sensor
 5b6:	80 e2       	ldi	r24, 0x20	; 32
 5b8:	8b b9       	out	0x0b, r24	; 11
	//_delay_ms(50);		// Let it wait for 50 ms so the voltage can be noticed by sensor
	waterLevelValue = ReadADC(WATERLEVEL_PIN);
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 5c0:	80 93 aa 01 	sts	0x01AA, r24
	changeADCinput();	// change ADC input
 5c4:	0e 94 7d 00 	call	0xfa	; 0xfa <changeADCinput>
	PORTD = 0b00000000;	// Turn off power to this sensor
 5c8:	1b b8       	out	0x0b, r1	; 11
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	// Send measured data to server
	// The server will send a message back, if it received the data
	// but also what level of moisture value to water and size of plant
	if (useDatabase == true)
 5ca:	80 91 a5 01 	lds	r24, 0x01A5
 5ce:	90 91 a6 01 	lds	r25, 0x01A6
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	51 f4       	brne	.+20     	; 0x5ea <wakeUp_Measure+0x76>
		inputToServer(ID, moistureValue, waterLevelValue);
 5d6:	40 91 aa 01 	lds	r20, 0x01AA
 5da:	60 91 ab 02 	lds	r22, 0x02AB
 5de:	80 91 03 01 	lds	r24, 0x0103
 5e2:	90 91 04 01 	lds	r25, 0x0104
 5e6:	0e 94 9e 01 	call	0x33c	; 0x33c <inputToServer>
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	// Check how much water is in the tank.
	// GND on the Arduino have a cable to the tank
	// to remove possible charge
	checkWaterLevel(waterLevelValue);
 5ea:	80 91 aa 01 	lds	r24, 0x01AA
 5ee:	0e 94 af 00 	call	0x15e	; 0x15e <checkWaterLevel>
	
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	// Check if the plant needs to be watered
	// Make sure Trigger value is set!!
	checkMoisture(moistureValue, moistureLeveltoWater);
 5f2:	60 91 a9 01 	lds	r22, 0x01A9
 5f6:	80 91 ab 02 	lds	r24, 0x02AB
 5fa:	0e 94 a6 00 	call	0x14c	; 0x14c <checkMoisture>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	83 ed       	ldi	r24, 0xD3	; 211
 602:	90 e3       	ldi	r25, 0x30	; 48
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <wakeUp_Measure+0x90>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <wakeUp_Measure+0x9a>
 60e:	00 00       	nop
	
	// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	
	_delay_ms(1000);
	// Enter sleep mode
	PORTB = 0b0000000;
 610:	15 b8       	out	0x05, r1	; 5
	PORTD = 0b0000000;
 612:	1b b8       	out	0x0b, r1	; 11
	sleep_cpu();
 614:	88 95       	sleep
 616:	08 95       	ret

00000618 <__vector_6>:
    {
    }
}

ISR(WDT_vect)	//Watchdog timeout ISR
{
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	sleep_disable();	// Wake up from sleep
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	8e 7f       	andi	r24, 0xFE	; 254
 63e:	83 bf       	out	0x33, r24	; 51
	count++;
 640:	80 91 05 01 	lds	r24, 0x0105
 644:	90 91 06 01 	lds	r25, 0x0106
 648:	01 96       	adiw	r24, 0x01	; 1
	
	if (count >= countInterval)
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	91 05       	cpc	r25, r1
 64e:	3c f0       	brlt	.+14     	; 0x65e <__vector_6+0x46>
	{
		count = 0;
 650:	10 92 06 01 	sts	0x0106, r1
 654:	10 92 05 01 	sts	0x0105, r1
		
		//PORTB = 0b00000111;
		//_delay_ms(1000);
		//PORTB = 0b00000000;
		
		wakeUp_Measure();
 658:	0e 94 ba 02 	call	0x574	; 0x574 <wakeUp_Measure>
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__vector_6+0x50>
}

ISR(WDT_vect)	//Watchdog timeout ISR
{
	sleep_disable();	// Wake up from sleep
	count++;
 65e:	90 93 06 01 	sts	0x0106, r25
 662:	80 93 05 01 	sts	0x0105, r24
		
		wakeUp_Measure();
	}
	
	else
		sleep_cpu();
 666:	88 95       	sleep
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <__vector_20>:
	if (UCSR0A & (1 << UDRE0))
		UDR0 = 0;
}

ISR(USART_TX_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	8f 93       	push	r24
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	if(txReadPos != txWritePos)
 69a:	e0 91 a4 01 	lds	r30, 0x01A4
 69e:	80 91 a3 01 	lds	r24, 0x01A3
 6a2:	e8 17       	cp	r30, r24
 6a4:	79 f0       	breq	.+30     	; 0x6c4 <__vector_20+0x3a>
	{
		UDR0 = txBuffer[txReadPos];
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	e5 5d       	subi	r30, 0xD5	; 213
 6aa:	fd 4f       	sbci	r31, 0xFD	; 253
 6ac:	80 81       	ld	r24, Z
 6ae:	80 93 c6 00 	sts	0x00C6, r24
		txReadPos++;
 6b2:	80 91 a4 01 	lds	r24, 0x01A4
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(txReadPos >= TX_BUFFER_SIZE)
 6b8:	1a f0       	brmi	.+6      	; 0x6c0 <__vector_20+0x36>
ISR(USART_TX_vect)
{
	if(txReadPos != txWritePos)
	{
		UDR0 = txBuffer[txReadPos];
		txReadPos++;
 6ba:	80 93 a4 01 	sts	0x01A4, r24
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__vector_20+0x3a>
		
		if(txReadPos >= TX_BUFFER_SIZE)
			txReadPos = 0;
 6c0:	10 92 a4 01 	sts	0x01A4, r1
	}
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	8f 91       	pop	r24
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__vector_18>:
	
	return ret;
}

ISR(USART_RX_vect)
{
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	8f 93       	push	r24
 6e0:	9f 93       	push	r25
 6e2:	ef 93       	push	r30
 6e4:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 6e6:	80 91 a2 01 	lds	r24, 0x01A2
 6ea:	90 91 c6 00 	lds	r25, 0x00C6
 6ee:	e8 2f       	mov	r30, r24
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	e5 55       	subi	r30, 0x55	; 85
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	90 83       	st	Z, r25
	
	rxWritePos++;
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 6fa:	1a f0       	brmi	.+6      	; 0x702 <__vector_18+0x2e>

ISR(USART_RX_vect)
{
	rxBuffer[rxWritePos] = UDR0;
	
	rxWritePos++;
 6fc:	80 93 a2 01 	sts	0x01A2, r24
 700:	02 c0       	rjmp	.+4      	; 0x706 <__vector_18+0x32>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
		rxWritePos = 0;
 702:	10 92 a2 01 	sts	0x01A2, r1
}
 706:	ff 91       	pop	r31
 708:	ef 91       	pop	r30
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	0f 90       	pop	r0
 710:	0f be       	out	0x3f, r0	; 63
 712:	0f 90       	pop	r0
 714:	1f 90       	pop	r1
 716:	18 95       	reti

00000718 <strcat>:
 718:	fb 01       	movw	r30, r22
 71a:	dc 01       	movw	r26, r24
 71c:	0d 90       	ld	r0, X+
 71e:	00 20       	and	r0, r0
 720:	e9 f7       	brne	.-6      	; 0x71c <strcat+0x4>
 722:	11 97       	sbiw	r26, 0x01	; 1
 724:	01 90       	ld	r0, Z+
 726:	0d 92       	st	X+, r0
 728:	00 20       	and	r0, r0
 72a:	e1 f7       	brne	.-8      	; 0x724 <strcat+0xc>
 72c:	08 95       	ret

0000072e <itoa>:
 72e:	45 32       	cpi	r20, 0x25	; 37
 730:	51 05       	cpc	r21, r1
 732:	20 f4       	brcc	.+8      	; 0x73c <itoa+0xe>
 734:	42 30       	cpi	r20, 0x02	; 2
 736:	10 f0       	brcs	.+4      	; 0x73c <itoa+0xe>
 738:	0c 94 a2 03 	jmp	0x744	; 0x744 <__itoa_ncheck>
 73c:	fb 01       	movw	r30, r22
 73e:	10 82       	st	Z, r1
 740:	cb 01       	movw	r24, r22
 742:	08 95       	ret

00000744 <__itoa_ncheck>:
 744:	bb 27       	eor	r27, r27
 746:	4a 30       	cpi	r20, 0x0A	; 10
 748:	31 f4       	brne	.+12     	; 0x756 <__itoa_ncheck+0x12>
 74a:	99 23       	and	r25, r25
 74c:	22 f4       	brpl	.+8      	; 0x756 <__itoa_ncheck+0x12>
 74e:	bd e2       	ldi	r27, 0x2D	; 45
 750:	90 95       	com	r25
 752:	81 95       	neg	r24
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__utoa_common>

0000075a <__utoa_ncheck>:
 75a:	bb 27       	eor	r27, r27

0000075c <__utoa_common>:
 75c:	fb 01       	movw	r30, r22
 75e:	55 27       	eor	r21, r21
 760:	aa 27       	eor	r26, r26
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	aa 1f       	adc	r26, r26
 768:	a4 17       	cp	r26, r20
 76a:	10 f0       	brcs	.+4      	; 0x770 <__utoa_common+0x14>
 76c:	a4 1b       	sub	r26, r20
 76e:	83 95       	inc	r24
 770:	50 51       	subi	r21, 0x10	; 16
 772:	b9 f7       	brne	.-18     	; 0x762 <__utoa_common+0x6>
 774:	a0 5d       	subi	r26, 0xD0	; 208
 776:	aa 33       	cpi	r26, 0x3A	; 58
 778:	08 f0       	brcs	.+2      	; 0x77c <__utoa_common+0x20>
 77a:	a9 5d       	subi	r26, 0xD9	; 217
 77c:	a1 93       	st	Z+, r26
 77e:	00 97       	sbiw	r24, 0x00	; 0
 780:	79 f7       	brne	.-34     	; 0x760 <__utoa_common+0x4>
 782:	b1 11       	cpse	r27, r1
 784:	b1 93       	st	Z+, r27
 786:	11 92       	st	Z+, r1
 788:	cb 01       	movw	r24, r22
 78a:	0c 94 c7 03 	jmp	0x78e	; 0x78e <strrev>

0000078e <strrev>:
 78e:	dc 01       	movw	r26, r24
 790:	fc 01       	movw	r30, r24
 792:	67 2f       	mov	r22, r23
 794:	71 91       	ld	r23, Z+
 796:	77 23       	and	r23, r23
 798:	e1 f7       	brne	.-8      	; 0x792 <strrev+0x4>
 79a:	32 97       	sbiw	r30, 0x02	; 2
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <strrev+0x18>
 79e:	7c 91       	ld	r23, X
 7a0:	6d 93       	st	X+, r22
 7a2:	70 83       	st	Z, r23
 7a4:	62 91       	ld	r22, -Z
 7a6:	ae 17       	cp	r26, r30
 7a8:	bf 07       	cpc	r27, r31
 7aa:	c8 f3       	brcs	.-14     	; 0x79e <strrev+0x10>
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
